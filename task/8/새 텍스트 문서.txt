#include "opencv.hpp"
#include <iostream>

using namespace std;
using namespace cv;

struct MouseParams
{
    Mat img;
    vector<Point2f> in, out;
};
static void onMouse(int event, int x, int y, int, void* param)
{
    MouseParams* mp = (MouseParams*)param;
    Mat img = mp->img;
    if (event == EVENT_LBUTTONDOWN) // left button
    {
        Mat result;
        //Insert position from LT. Direction is clock-wise
        mp->in.push_back(Point2f(x, y));
        if (mp->in.size() == 4)
        {
            // Calculate perspective transform matrix(=homo_mat) from 4 matching pairs of points
            Mat homo_mat = getPerspectiveTransform(mp->in, mp->out);

            // apply perspective transformation to img using homo_mat
// result will have the same size of Size(300, 300) and the same type of img
            warpPerspective(img, result, homo_mat, Size(300, 300));
            imshow("output", result);
        }
        else
        {
            result = img.clone();
            for (size_t i = 0; i < mp->in.size(); i++)
            {
                circle(result, mp->in[i], 3, Scalar(0, 0, 255), 5);
            }
            imshow("input", result);
        }
    }
    //Reset positions
    if (event == EVENT_RBUTTONDOWN)
    {
        mp->in.clear();
        imshow("input", img);
    }
}


//예시와 반대로 적용필요. 위 struct에 영상의 크기에 맞는 포인트를 4개 잡고 아래 push_back기능에 내가 마우스로 선택하도록 변경할 필요 있음
int main()
{
    VideoCapture cap("Project2_video.mp4");

    if (cap.open("Project2_video.mp4") == 0)
    {
        cout << "There is no file" << endl;
        return -1;
    }

    while (true) {

    }
    Mat
    MouseParams mp;
    mp.out.push_back(Point2f(0, 0));
    mp.out.push_back(Point2f(300, 0));
    mp.out.push_back(Point2f(300, 300));
    mp.out.push_back(Point2f(0, 300));
    mp.img = imput;
    setMouseCallback("input", onMouse, (void*)&mp);
    waitKey();
    return 0
}
